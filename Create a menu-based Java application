import java.io.*;
import java.util.*;

// Employee class implementing Serializable
class Employee implements Serializable {
    private static final long serialVersionUID = 1L;
    private int employeeId;
    private String name;
    private String designation;
    private double salary;

    // Constructor
    public Employee(int employeeId, String name, String designation, double salary) {
        this.employeeId = employeeId;
        this.name = name;
        this.designation = designation;
        this.salary = salary;
    }

    // Display employee details
    public void display() {
        System.out.println("ID: " + employeeId + " | Name: " + name + " | Designation: " + designation + " | Salary: " + salary);
    }
}

public class EmployeeManagementApp {

    private static final String FILE_NAME = "employees.ser";

    // Method to add an employee
    public static void addEmployee(Scanner scanner) {
        try {
            System.out.print("Enter Employee ID: ");
            int id = Integer.parseInt(scanner.nextLine());
            System.out.print("Enter Employee Name: ");
            String name = scanner.nextLine();
            System.out.print("Enter Designation: ");
            String designation = scanner.nextLine();
            System.out.print("Enter Salary: ");
            double salary = Double.parseDouble(scanner.nextLine());

            Employee employee = new Employee(id, name, designation, salary);

            // Append employee to the existing list and serialize
            List<Employee> employees = readEmployeesFromFile();
            employees.add(employee);
            writeEmployeesToFile(employees);

            System.out.println("Employee added successfully!\n");
        } catch (NumberFormatException e) {
            System.out.println("Invalid input. Please enter correct data types.\n");
        } catch (IOException e) {
            System.out.println("Error while adding employee: " + e.getMessage());
        }
    }

    // Method to display all employees
    public static void displayAllEmployees() {
        List<Employee> employees = readEmployeesFromFile();
        if (employees.isEmpty()) {
            System.out.println("No employee records found.\n");
        } else {
            System.out.println("\n--- Employee List ---");
            for (Employee emp : employees) {
                emp.display();
            }
            System.out.println();
        }
    }

    // Read employees from file (deserialization)
    private static List<Employee> readEmployeesFromFile() {
        List<Employee> employees = new ArrayList<>();
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
            employees = (List<Employee>) ois.readObject();
        } catch (FileNotFoundException e) {
            // File might not exist initially; no action needed
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error reading employees: " + e.getMessage());
        }
        return employees;
    }

    // Write employees to file (serialization)
    private static void writeEmployeesToFile(List<Employee> employees) throws IOException {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
            oos.writeObject(employees);
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        System.out.println("=== Employee Management Application ===");

        do {
            System.out.println("\nMenu:");
            System.out.println("1. Add an Employee");
            System.out.println("2. Display All Employees");
            System.out.println("3. Exit");
            System.out.print("Enter your choice: ");

            try {
                choice = Integer.parseInt(scanner.nextLine());

                switch (choice) {
                    case 1:
                        addEmployee(scanner);
                        break;
                    case 2:
                        displayAllEmployees();
                        break;
                    case 3:
                        System.out.println("Exiting application. Goodbye!");
                        break;
                    default:
                        System.out.println("Invalid choice. Please select 1, 2, or 3.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Please enter a valid numeric choice.");
                choice = 0; // Reset choice to continue the loop
            }

        } while (choice != 3);

        scanner.close();
    }
}
